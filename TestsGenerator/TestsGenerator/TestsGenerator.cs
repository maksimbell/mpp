using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestsGenerator
{
    public class TestsGenerator
    {
        private static readonly Random rand = new Random(DateTime.Now.Second);

        private const string templateTestNamespace = "Tests_{0}_Namespace";
        private const string templateTesClass = "Tests_{0}_Class";
        private const string templateTestMethod = "Test_{0}_{1}_Method";

        public static string GenerateTestCode(CompilationUnitSyntax root)
        {
            var testRoot = SyntaxFactory.CompilationUnit()
                .AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("Microsoft.VisualStudio.TestTools.UnitTesting")));

            var classDeclarations = SyntaxParser.GetClassDeclarations(root);


            var testNamespace = SyntaxFactory.NamespaceDeclaration(
                SyntaxFactory.ParseName(string.Format(templateTestNamespace, rand.Next()))
            );

            var testClass = SyntaxFactory.ClassDeclaration(
                string.Format(templateTesClass, rand.Next())
            ).AddAttributeLists(
                SyntaxFactory.AttributeList(
                    SyntaxFactory.SingletonSeparatedList(
                        SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("TestClass"))
                    )
                )
            );


            foreach(var classDeclaration in classDeclarations)
            {
                var methodDeclarations = SyntaxParser.GetPublicMethodsDeclarations(classDeclaration);

                foreach(var methodDeclaration in methodDeclarations)
                {
                    var testMethodDeclaration = SyntaxFactory.MethodDeclaration(
                        SyntaxFactory.ParseTypeName("void"),
                        string.Format(templateTestMethod, classDeclaration.Identifier, methodDeclaration.Identifier)
                    ).AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                     .WithBody(SyntaxFactory.Block(SyntaxFactory.ParseStatement("Assert.Fail(\"autogenerated\");")))
                        .AddAttributeLists(
                            SyntaxFactory.AttributeList(
                                SyntaxFactory.SingletonSeparatedList(
                                    SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("TestMethod"))
                                )
                            )
                        );

                    testClass = testClass.AddMembers(testMethodDeclaration);
                }
            }

            testNamespace = testNamespace.AddMembers(testClass);

            testRoot = testRoot.AddMembers(testNamespace);
            var code = testRoot
                .NormalizeWhitespace()
                .ToFullString();

            return code;
        }

        public static Task<string> GetTestCode(string classSrcCode)
        {
            return Task.Run(() =>
            {
                var syntaxTree = SyntaxParser.Parse(classSrcCode);
                var testClassSrcCode = GenerateTestCode(syntaxTree);
                return testClassSrcCode;
            });
        }
    }
}