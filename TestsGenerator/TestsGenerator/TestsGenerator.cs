using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestsGenerator
{
    public class TestsGenerator
    {

        private const string templateTestNamespace = "{0}.Tests";
        private const string templateTestClass = "{0}Tests";
        private const string templateTestMethod = "Test_{0}_{1}_Method";

        public static IEnumerable<string>GenerateTestCode(CompilationUnitSyntax root)
        {

            var classDeclarations = SyntaxParser.GetClassDeclarations(root);
            var testClasses = new List<string>();
            
            foreach(var classDeclaration in classDeclarations)
            {
                var sourceNamespace = (BaseNamespaceDeclarationSyntax)classDeclaration.Parent;

                var testRoot = SyntaxFactory.CompilationUnit()
                .AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("Microsoft.VisualStudio.TestTools.UnitTesting")));

                if(classDeclaration.Parent != null)
                {
                    var parent = classDeclaration.Parent;
                    if((parent.IsKind(SyntaxKind.FileScopedNamespaceDeclaration) || (parent.IsKind(SyntaxKind.NamespaceDeclaration))))
                    {
                        sourceNamespace = (BaseNamespaceDeclarationSyntax)parent;
                        testRoot = testRoot
                        .AddUsings(SyntaxFactory.UsingDirective(SyntaxFactory.IdentifierName(sourceNamespace.Name.ToString())));
                    }
                }

                var testNamespace = SyntaxFactory.NamespaceDeclaration(
                    SyntaxFactory.ParseName(string.Format(templateTestNamespace, sourceNamespace!.Name))
                );

                var testClass = SyntaxFactory.ClassDeclaration(
                    string.Format(templateTestClass, classDeclaration.Identifier.Text)
                ).AddAttributeLists(
                    SyntaxFactory.AttributeList(
                        SyntaxFactory.SingletonSeparatedList(
                            SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("TestClass"))
                        )
                    )
                );

                var methodDeclarations = SyntaxParser.GetPublicMethodsDeclarations(classDeclaration);

                Dictionary<string, int> overloadCounter = new Dictionary<string, int>();

                foreach(var methodDeclaration in methodDeclarations)
                {
                    var methodName = methodDeclaration.Identifier.Text;
                    if(overloadCounter.ContainsKey(methodName))
                    {
                        overloadCounter[methodName]++;
                        methodName = methodDeclaration.Identifier.Text + overloadCounter[methodName];
                    }
                    else
                    {
                        overloadCounter.Add(methodName, 1);
                    }

                    var testMethodDeclaration = SyntaxFactory.MethodDeclaration(
                        SyntaxFactory.ParseTypeName("void"),
                        string.Format(templateTestMethod, classDeclaration.Identifier, methodName)
                    ).AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                     .WithBody(SyntaxFactory.Block(SyntaxFactory.ParseStatement("Assert.Fail(\"autogenerated\");")))
                        .AddAttributeLists(
                            SyntaxFactory.AttributeList(
                                SyntaxFactory.SingletonSeparatedList(
                                    SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("TestMethod"))
                                )
                            )
                        );

                    testClass = testClass.AddMembers(testMethodDeclaration);
                }

                testNamespace = testNamespace.AddMembers(testClass);
                testRoot = testRoot.AddMembers(testNamespace); 

                var code = testRoot
                .NormalizeWhitespace()
                .ToFullString();

                testClasses.Add(code);
            }

            return testClasses;
        }

        public static Task<IEnumerable<string>> GetTestCode(string classSrcCode)
        {
            return Task.Run(() =>
            {
                var syntaxTree = SyntaxParser.Parse(classSrcCode);
                var testClassSrcCode = GenerateTestCode(syntaxTree);
                return testClassSrcCode;
            });
        }
    }
}